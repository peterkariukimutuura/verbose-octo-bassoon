{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","backgroundColor","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","defaultChecked","onChange","markComplete","bind","checkBoxStyle","btnStyle","onClick","delTodo","Component","color","border","borderRadius","cursor","float","outline","marginRight","Todos","todos","map","key","headerStyle","background","textAlign","fontFamily","marginBottom","linkStyle","margin","Header","to","AddTodo","state","e","setState","target","name","value","onSubmit","preventDefault","addTodo","display","placeholder","inputStyle","className","flex","About","Fragment","App","confirm","Axios","delete","then","res","filter","post","data","get","exact","path","render","length","marginTop","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ea718f33.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\n\nclass TodoItem extends Component {\n\n    getStyle = () => {\n        return {\n            backgroundColor: '#f4f4f4',\n            padding: '10px',\n            borderBottom: '1px #ccc dotted',\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\n        }\n    }\n\n\n\n    render() {\n        const {id,title,completed}  = this.props.todo;\n\n        return (\n            <div style={this.getStyle()}>\n                <p>\n                    <input type=\"checkbox\" defaultChecked={completed} onChange={this.props.markComplete.bind(this,id)} style={checkBoxStyle}/>\n                    {title}\n                    <button style={btnStyle} onClick={this.props.delTodo.bind(this,id,title)}>x</button>\n                </p>\n            </div>\n        )\n    }\n\n}\n\nTodoItem.propTypes = {\n    todo: PropTypes.object.isRequired,\n    markComplete: PropTypes.func.isRequired,\n    delTodo: PropTypes.func.isRequired,\n}\n\nconst btnStyle ={\n    backgroundColor: 'red',\n    color:'white',\n    border:'none',\n    padding:'5px 10px',\n    borderRadius: '50%',\n    cursor:'pointer',\n    float:'right',\n    outline:'none'\n}\n\nconst checkBoxStyle ={\n    marginRight:'5px'\n}\n\nexport default TodoItem;\n\n\n","import React , {Component} from 'react';\nimport TodoItem from './TodoItem';\nimport PropTypes from 'prop-types';\n\n\nclass Todos extends Component {\n\n    render(){\n        return this.props.todos.map((todo)=>(\n            <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete} delTodo={this.props.delTodo}/>\n        ));\n    }\n}\n\n// eslint-disable-next-line react/no-typos\nTodos.propTypes = {\n    todos : PropTypes.array.isRequired,\n    markComplete : PropTypes.func.isRequired,\n    delTodo:PropTypes.func.isRequired\n}\n\nexport default Todos;","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nfunction Header() {\n    return (\n        <header style={headerStyle}>\n            <h1>Todo List</h1>\n            <Link style={linkStyle} to=\"/\">Home</Link>||<Link style={linkStyle} to=\"/about\">About</Link>\n        </header>\n    )\n}\n\n\nconst headerStyle = {\n    background: '#134040',\n    color: '#fff',\n    textAlign: 'center',\n    padding: '10px',\n    fontFamily:'Arial',\n    marginBottom:'5px'\n}\n\nconst linkStyle = {\n    color:'white',\n    margin: '2px'\n}\nexport default Header;","import React, { Component } from 'react'\n\nexport class AddTodo extends Component {\n\n    state = {\n        title:''\n    }\n\n    onChange=(e)=>{\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n    onSubmit=(e)=>{\n        e.preventDefault();\n        this.props.addTodo(this.state.title);\n        this.setState({title:''});\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.onSubmit} style={{ display: 'flex' }}>\n                <input \n                    type=\"text\" \n                    name=\"title\" \n                    placeholder=\"Add Todo...\" \n                    value={this.state.title} \n                    onChange={this.onChange}\n                    style={inputStyle}/>\n                <input type=\"submit\" value=\"submit\" className=\"btn\" style={{ flex: 1 }} />\n            </form>\n        )\n    }\n}\n\nconst inputStyle ={\n    flex:'10',\n    padding:'5px',\n    outline:'none'\n}\n\nexport default AddTodo\n","import React, { Component } from 'react'\n\nexport class About extends Component {\n    render() {\n        return (\n            <React.Fragment>\n                <h1>About</h1>\n                <p>\n                    Testing react dom\n                </p>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default About\n","import React, { Component } from 'react';\nimport './App.css';\nimport Todos from './components/Todos';\nimport Header from './components/layout/Header';\nimport AddTodo from './components/AddTodo';\nimport About from './components/pages/About'\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Axios from 'axios';\n\nclass App extends Component {\n  state = {\n    todos: []\n  }\n\n  componentDidMount(){\n    Axios.get('https://jsonplaceholder.typicode.com/todos?_limit=5').then(res=>this.setState({todos:res.data}));\n  }\n\n  markComplete = (id) => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      })\n    })\n  }\n\n  delTodo = (id, title) => {\n    // eslint-disable-next-line no-restricted-globals\n    if (!confirm(`Delete todo: ${title}`)) return;\n\n    Axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`).then(res=>this.setState({todos: [...this.state.todos.filter(todo => todo.id !== id)]}));\n    \n  }\n\n  addTodo = (title) => {\n    Axios.post('https://jsonplaceholder.typicode.com/todos',{title,completed:false}).then(res=>this.setState({ todos: [...this.state.todos, res.data] }));\n    \n  }\n\n  render() {\n    // console.log(this.state.todos);\n\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route exact path=\"/\" render={props => (\n              <React.Fragment>\n                <AddTodo addTodo={this.addTodo} />\n                <Todos todos={this.state.todos} markComplete={this.markComplete} delTodo={this.delTodo} />\n                <small style={{ display:this.state.todos.length !== 0 ? 'none' : '',marginTop:'4px' }}>No records found</small>\n              </React.Fragment>\n            )} />\n\n            <Route path=\"/about\" component={About}/>\n\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}