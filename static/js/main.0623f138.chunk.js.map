{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","backgroundColor","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","checkBoxStyle","btnStyle","onClick","delTodo","Component","color","border","borderRadius","cursor","float","outline","marginRight","Todos","todos","map","key","headerStyle","background","textAlign","fontFamily","marginBottom","Header","AddTodo","display","name","placeholder","inputStyle","value","className","flex","App","state","setState","confirm","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gMAGMA,G,kNAEFC,SAAW,WACP,MAAO,CACHC,gBAAiB,UACjBC,QAAS,OACTC,aAAc,kBACdC,eAAgB,EAAKC,MAAMC,KAAKC,UAAY,eAAiB,S,uDAM3D,IAAD,EACeC,KAAKH,MAAMC,KAAxBG,EADF,EACEA,GAAGC,EADL,EACKA,MAEV,OACI,yBAAKC,MAAOH,KAAKR,YACb,2BACI,2BAAOY,KAAK,WAAWC,SAAUL,KAAKH,MAAMS,aAAaC,KAAKP,KAAKC,GAAKE,MAAOK,IAC9EN,EACD,4BAAQC,MAAOM,EAAUC,QAASV,KAAKH,MAAMc,QAAQJ,KAAKP,KAAKC,EAAGC,IAAlE,W,GArBGU,cAiCjBH,EAAU,CACZhB,gBAAiB,MACjBoB,MAAM,QACNC,OAAO,OACPpB,QAAQ,WACRqB,aAAc,MACdC,OAAO,UACPC,MAAM,QACNC,QAAQ,QAGNV,EAAe,CACjBW,YAAY,OAGD5B,IChCA6B,E,uKAZF,IAAD,OACJ,OAAOpB,KAAKH,MAAMwB,MAAMC,KAAI,SAACxB,GAAD,OACxB,kBAAC,EAAD,CAAUyB,IAAKzB,EAAKG,GAAIH,KAAMA,EAAMQ,aAAc,EAAKT,MAAMS,aAAcK,QAAS,EAAKd,MAAMc,iB,GAJvFC,aCMpB,IAAMY,EAAc,CAChBC,WAAY,UACZZ,MAAO,OACPa,UAAW,SACXhC,QAAS,OACTiC,WAAW,QACXC,aAAa,OAGFC,EAlBf,WACI,OACI,4BAAQ1B,MAAOqB,GACX,2CCHCM,EAAb,uKAEQ,OACI,0BAAM3B,MAAO,CAAE4B,QAAS,SACpB,2BAAO3B,KAAK,OAAO4B,KAAK,QAAQC,YAAY,cAAc9B,MAAO+B,IACjE,2BAAO9B,KAAK,SAAS+B,MAAM,SAASC,UAAU,MAAMjC,MAAO,CAAEkC,KAAM,UALnF,GAA6BzB,aAWvBsB,EAAY,CACdG,KAAK,KACL3C,QAAQ,MACRwB,QAAQ,QAGGY,IC4CAQ,E,4MAxDbC,MAAQ,CACNlB,MAAO,CACL,CACEpB,GAAI,EACJC,MAAO,iBACPH,WAAW,GAEb,CACEE,GAAI,EACJC,MAAO,mBACPH,WAAW,GAEb,CACEE,GAAI,EACJC,MAAO,oBACPH,WAAW,K,EAKjBO,aAAe,SAACL,GACd,EAAKuC,SAAS,CACZnB,MAAO,EAAKkB,MAAMlB,MAAMC,KAAI,SAAAxB,GAI1B,OAHIA,EAAKG,KAAOA,IACdH,EAAKC,WAAaD,EAAKC,WAElBD,Q,EAKba,QAAU,SAACV,EAAIC,GAERuC,QAAQ,gBAAD,OAAiBvC,KAC7B,EAAKsC,SAAS,CACZnB,MAAM,YAAK,EAAKkB,MAAMlB,MAAMqB,QAAO,SAAA5C,GAAI,OAAIA,EAAKG,KAAOA,S,uDAOzD,OACE,yBAAKmC,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOf,MAAOrB,KAAKuC,MAAMlB,MAAOf,aAAcN,KAAKM,aAAcK,QAASX,KAAKW,gB,GAhDvEC,aCME+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0623f138.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\n\nclass TodoItem extends Component {\n\n    getStyle = () => {\n        return {\n            backgroundColor: '#f4f4f4',\n            padding: '10px',\n            borderBottom: '1px #ccc dotted',\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\n        }\n    }\n\n\n\n    render() {\n        const {id,title}  = this.props.todo;\n\n        return (\n            <div style={this.getStyle()}>\n                <p>\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this,id)} style={checkBoxStyle}/>\n                    {title}\n                    <button style={btnStyle} onClick={this.props.delTodo.bind(this,id,title)}>x</button>\n                </p>\n            </div>\n        )\n    }\n\n}\n\nTodoItem.propTypes = {\n    todo: PropTypes.object.isRequired\n}\n\nconst btnStyle ={\n    backgroundColor: 'red',\n    color:'white',\n    border:'none',\n    padding:'5px 10px',\n    borderRadius: '50%',\n    cursor:'pointer',\n    float:'right',\n    outline:'none'\n}\n\nconst checkBoxStyle ={\n    marginRight:'5px'\n}\n\nexport default TodoItem;\n\n\n","import React , {Component} from 'react';\nimport TodoItem from './TodoItem';\nimport PropTypes from 'prop-types';\n\n\nclass Todos extends Component {\n\n    render(){\n        return this.props.todos.map((todo)=>(\n            <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete} delTodo={this.props.delTodo}/>\n        ));\n    }\n}\n\n// eslint-disable-next-line react/no-typos\nTodos.propTypes = {\n    todos : PropTypes.array.isRequired\n}\n\nexport default Todos;","import React from 'react';\n\nfunction Header() {\n    return (\n        <header style={headerStyle}>\n            <h1>Todo List</h1>\n        </header>\n    )\n}\n\n\nconst headerStyle = {\n    background: '#134040',\n    color: '#fff',\n    textAlign: 'center',\n    padding: '10px',\n    fontFamily:'Arial',\n    marginBottom:'5px'\n}\n\nexport default Header;","import React, { Component } from 'react'\n\nexport class AddTodo extends Component {\n    render() {\n        return (\n            <form style={{ display: 'flex' }}>\n                <input type=\"text\" name=\"title\" placeholder=\"Add Todo...\" style={inputStyle}/>\n                <input type=\"submit\" value=\"submit\" className=\"btn\" style={{ flex: 1 }} />\n            </form>\n        )\n    }\n}\n\nconst inputStyle ={\n    flex:'10',\n    padding:'5px',\n    outline:'none'\n}\n\nexport default AddTodo\n","import React, { Component } from 'react';\nimport './App.css';\nimport Todos from './components/Todos';\nimport Header from './components/layout/Header';\nimport AddTodo from './components/AddTodo';\n\nclass App extends Component {\n  state = {\n    todos: [\n      {\n        id: 1,\n        title: 'Take out trash',\n        completed: false\n      },\n      {\n        id: 2,\n        title: 'Dinner with wife',\n        completed: false\n      },\n      {\n        id: 3,\n        title: 'Meeting with boss',\n        completed: false\n      }\n    ]\n  }\n\n  markComplete = (id) => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      })\n    })\n  }\n\n  delTodo = (id, title) => {\n    // eslint-disable-next-line no-restricted-globals\n    if (!confirm(`Delete todo: ${title}`)) return;\n    this.setState({\n      todos: [...this.state.todos.filter(todo => todo.id !== id)]\n    });\n  }\n\n  render() {\n    // console.log(this.state.todos);\n\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <Header />\n          <AddTodo />\n          <Todos todos={this.state.todos} markComplete={this.markComplete} delTodo={this.delTodo} />\n        </div>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}