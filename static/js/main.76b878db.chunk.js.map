{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","backgroundColor","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","btnStyle","onClick","delTodo","Component","color","border","borderRadius","cursor","float","outline","Todos","todos","map","key","headerStyle","background","textAlign","fontFamily","Header","App","state","setState","confirm","filter","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gMAGMA,G,kNAEFC,SAAW,WACP,MAAO,CACHC,gBAAiB,UACjBC,QAAS,OACTC,aAAc,kBACdC,eAAgB,EAAKC,MAAMC,KAAKC,UAAY,eAAiB,S,uDAM3D,IAAD,EACeC,KAAKH,MAAMC,KAAxBG,EADF,EACEA,GAAGC,EADL,EACKA,MAEV,OACI,yBAAKC,MAAOH,KAAKR,YACb,2BACI,2BAAOY,KAAK,WAAWC,SAAUL,KAAKH,MAAMS,aAAaC,KAAKP,KAAKC,KAClEC,EACD,4BAAQC,MAAOK,EAAUC,QAAST,KAAKH,MAAMa,QAAQH,KAAKP,KAAKC,EAAGC,IAAlE,W,GArBGS,cAiCjBH,EAAU,CACZf,gBAAiB,MACjBmB,MAAM,QACNC,OAAO,OACPnB,QAAQ,WACRoB,aAAc,MACdC,OAAO,UACPC,MAAM,QACNC,QAAQ,QAGG1B,IC5BA2B,E,uKAZF,IAAD,OACJ,OAAOlB,KAAKH,MAAMsB,MAAMC,KAAI,SAACtB,GAAD,OACxB,kBAAC,EAAD,CAAUuB,IAAKvB,EAAKG,GAAIH,KAAMA,EAAMQ,aAAc,EAAKT,MAAMS,aAAcI,QAAS,EAAKb,MAAMa,iB,GAJvFC,aCMpB,IAAMW,EAAc,CAChBC,WAAY,OACZX,MAAO,OACPY,UAAW,SACX9B,QAAS,OACT+B,WAAW,SAGAC,EAjBf,WACI,OACI,4BAAQvB,MAAOmB,GACX,2CCsDGK,E,4MArDbC,MAAQ,CACNT,MAAO,CACL,CACElB,GAAI,EACJC,MAAO,iBACPH,WAAW,GAEb,CACEE,GAAI,EACJC,MAAO,mBACPH,WAAW,GAEb,CACEE,GAAI,EACJC,MAAO,oBACPH,WAAW,K,EAKjBO,aAAe,SAACL,GACd,EAAK4B,SAAS,CACZV,MAAM,EAAKS,MAAMT,MAAMC,KAAI,SAAAtB,GAIzB,OAHGA,EAAKG,KAAOA,IACbH,EAAKC,WAAaD,EAAKC,WAElBD,Q,EAKbY,QAAQ,SAACT,EAAGC,GAEN4B,QAAQ,gBAAD,OAAiB5B,KAC5B,EAAK2B,SAAS,CACZV,MAAM,YAAI,EAAKS,MAAMT,MAAMY,QAAO,SAAAjC,GAAI,OAAEA,EAAKG,KAAKA,S,uDAOpD,OACE,yBAAK+B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOb,MAAOnB,KAAK4B,MAAMT,MAAOb,aAAcN,KAAKM,aAAcI,QAASV,KAAKU,e,GA9CrEC,aCOEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.76b878db.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\n\nclass TodoItem extends Component {\n\n    getStyle = () => {\n        return {\n            backgroundColor: '#f4f4f4',\n            padding: '10px',\n            borderBottom: '1px #ccc dotted',\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\n        }\n    }\n\n\n\n    render() {\n        const {id,title}  = this.props.todo;\n\n        return (\n            <div style={this.getStyle()}>\n                <p>\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this,id)}/>\n                    {title}\n                    <button style={btnStyle} onClick={this.props.delTodo.bind(this,id,title)}>x</button>\n                </p>\n            </div>\n        )\n    }\n\n}\n\nTodoItem.propTypes = {\n    todo: PropTypes.object.isRequired\n}\n\nconst btnStyle ={\n    backgroundColor: 'red',\n    color:'white',\n    border:'none',\n    padding:'5px 10px',\n    borderRadius: '50%',\n    cursor:'pointer',\n    float:'right',\n    outline:'none'\n}\n\nexport default TodoItem;\n\n\n","import React , {Component} from 'react';\nimport TodoItem from './TodoItem';\nimport PropTypes from 'prop-types';\n\n\nclass Todos extends Component {\n\n    render(){\n        return this.props.todos.map((todo)=>(\n            <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete} delTodo={this.props.delTodo}/>\n        ));\n    }\n}\n\n// eslint-disable-next-line react/no-typos\nTodos.propTypes = {\n    todos : PropTypes.array.isRequired\n}\n\nexport default Todos;","import React from 'react';\n\nfunction Header() {\n    return (\n        <header style={headerStyle}>\n            <h1>Todo List</h1>\n        </header>\n    )\n}\n\n\nconst headerStyle = {\n    background: '#333',\n    color: '#fff',\n    textAlign: 'center',\n    padding: '10px',\n    fontFamily:'Arial'\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport './App.css';\nimport Todos from './components/Todos';\nimport Header from './components/layout/Header';\n\nclass App extends Component {\n  state = {\n    todos: [\n      {\n        id: 1,\n        title: 'Take out trash',\n        completed: false\n      },\n      {\n        id: 2,\n        title: 'Dinner with wife',\n        completed: false\n      },\n      {\n        id: 3,\n        title: 'Meeting with boss',\n        completed: false\n      }\n    ]\n  }\n\n  markComplete = (id) => {\n    this.setState({\n      todos:this.state.todos.map(todo=>{\n        if(todo.id === id){\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      })\n    })\n  }\n\n  delTodo=(id,title)=>{\n    // eslint-disable-next-line no-restricted-globals\n    if(!confirm(`Delete todo: ${title}`) ) return;\n    this.setState({\n      todos:[...this.state.todos.filter(todo=>todo.id!==id)]\n    });\n  }\n\n  render() {\n    // console.log(this.state.todos);\n\n    return (\n      <div className=\"App\">\n        <Header/>\n        <Todos todos={this.state.todos} markComplete={this.markComplete} delTodo={this.delTodo}/>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}